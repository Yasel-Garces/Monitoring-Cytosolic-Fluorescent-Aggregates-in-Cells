R_no_Quenching<-readFiles(dir_R_no_Quenching)
directory<-dir_R_no_Quenching
files<-list.files(directory,pattern = ".csv")
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-6,nchar(files[1])-4))
)
GlobalData
files[1]
substr(files[1],nchar(files[1])-6,nchar(files[1])-4)
substr(files[1],nchar(files[1])-5,nchar(files[1])-4)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
dir_GR_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR_no_quenching/'
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
GR_Quenching<-mutate(GR_Quenching,Condition='GR Quenching')
R_no_Quenching<-mutate(R_no_Quenching,Condition='R no Quenching')
GR_no_Quenching<-mutate(GR_no_Quenching,Condition='GR no Quenching')
GlobalData<-rbind(GR_Quenching,R_no_Quenching,GR_no_Quenching)
GlobalData1<-mutate(GlobalData,Venus_over_mCherry=Venus_Mean/mCherry_Mean.)
GlobalData1<-select(GlobalData1,Time.Img,Condition,Venus_over_mCherry)
size<-length(levels(GlobalData1$Time.Img))
GRQvsGRnQ<-vector(mode="numeric",length = size)
GRQvsRnQ<-vector(mode="numeric",length = size)
RnQvsGRnQ<-vector(mode="numeric",length = size)
GRQ<-vector(mode="numeric",length = size)
GRnQ<-vector(mode="numeric",length = size)
RnQ<-vector(mode="numeric",length = size)
Condition<-rep(c("GR Quenching","GR no Quenching","R no Quenching"),size*3)
for (i in 1:size){
this_time<-levels(GlobalData1$Time.Img)[i]
this_timeData<-subset(GlobalData1,Time.Img==this_time)
# GR Quenching
GR_QuenchingTime<-subset(this_timeData,Condition=="GR Quenching")
# GR no Quenching
GR_No_QuenchingTime<-subset(this_timeData,Condition=="GR no Quenching")
# GR Quenching
R_No_QuenchingTime<-subset(this_timeData,Condition=="R no Quenching")
GR_No_QuenchingTime1<-sample(GR_No_QuenchingTime$Venus_over_mCherry,
length(GR_No_QuenchingTime$Venus_over_mCherry), replace = FALSE)
R_No_QuenchingTime1<-sample(R_No_QuenchingTime$Venus_over_mCherry,
length(R_No_QuenchingTime$Venus_over_mCherry), replace = FALSE)
GRQvsGRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,GR_No_QuenchingTime1)$p.value
GRQvsRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,R_No_QuenchingTime1)$p.value
RnQvsGRnQ[i]<-wilcox.test(GR_No_QuenchingTime1,R_No_QuenchingTime1)$p.value
GRQ[i]<-shapiro.test(GR_QuenchingTime$Venus_over_mCherry)$p.value
GRnQ[i]<-shapiro.test(GR_No_QuenchingTime$Venus_over_mCherry)$p.value
RnQ[i]<-shapiro.test(R_No_QuenchingTime$Venus_over_mCherry)$p.value
}
i
this_time<-levels(GlobalData1$Time.Img)[i]
this_time
this_timeData<-subset(GlobalData1,Time.Img==this_time)
this_timeData
# Global analysis with the 3 conditions: R no Quenching, GR no Quenching y GR Quenching.
# Library
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cowplot)
library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
#----------------------------------------------------------------------------
## Load the files for the 3 conditions
# Directory with the data
dir_GR_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR_no_quenching/'
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
levels(GR_Quenching$Time.Img)
levels(R_no_Quenching$Time.Img)
directory<-dir_R_no_Quenching
files<-list.files(directory,pattern = ".csv")
files
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
files[1]
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
i=2
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-5,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-5,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
dir_GR_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR_no_quenching/'
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
levels(R_no_Quenching$Time.Img)
GlobalData$Time.Img
GlobalData$Time.Img<-as.factor(GlobalData$Time.Img*5)
levels(GlobalData$Time.Img)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
GlobalData$Time.Img<-as.factor(GlobalData$Time.Img*5)
levels(GlobalData$Time.Img)
361*5
View(GlobalData)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
View(GlobalData)
# Global analysis with the 3 conditions: R no Quenching, GR no Quenching y GR Quenching.
# Library
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cowplot)
library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-5,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
#----------------------------------------------------------------------------
## Load the files for the 3 conditions
# Directory with the data
dir_GR_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/TRABAJO/Adan_Lisosomas/Lysosomes Vadim/Data(csv)/GR_no_quenching/'
# Load data
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
# Factor variables
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
GR_Quenching<-mutate(GR_Quenching,Condition='GR Quenching')
R_no_Quenching<-mutate(R_no_Quenching,Condition='R no Quenching')
GR_no_Quenching<-mutate(GR_no_Quenching,Condition='GR no Quenching')
GlobalData<-rbind(GR_Quenching,R_no_Quenching,GR_no_Quenching)
GlobalData1<-mutate(GlobalData,Venus_over_mCherry=Venus_Mean/mCherry_Mean.)
GlobalData1<-select(GlobalData1,Time.Img,Condition,Venus_over_mCherry)
levels(GlobalData1$Time.Img)
size<-length(levels(GlobalData1$Time.Img))
GRQvsGRnQ<-vector(mode="numeric",length = size)
GRQvsRnQ<-vector(mode="numeric",length = size)
RnQvsGRnQ<-vector(mode="numeric",length = size)
GRQ<-vector(mode="numeric",length = size)
GRnQ<-vector(mode="numeric",length = size)
RnQ<-vector(mode="numeric",length = size)
Condition<-rep(c("GR Quenching","GR no Quenching","R no Quenching"),size*3)
for (i in 1:size){
this_time<-levels(GlobalData1$Time.Img)[i]
this_timeData<-subset(GlobalData1,Time.Img==this_time)
# GR Quenching
GR_QuenchingTime<-subset(this_timeData,Condition=="GR Quenching")
# GR no Quenching
GR_No_QuenchingTime<-subset(this_timeData,Condition=="GR no Quenching")
# GR Quenching
R_No_QuenchingTime<-subset(this_timeData,Condition=="R no Quenching")
GR_No_QuenchingTime1<-sample(GR_No_QuenchingTime$Venus_over_mCherry,
length(GR_No_QuenchingTime$Venus_over_mCherry), replace = FALSE)
R_No_QuenchingTime1<-sample(R_No_QuenchingTime$Venus_over_mCherry,
length(R_No_QuenchingTime$Venus_over_mCherry), replace = FALSE)
GRQvsGRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,GR_No_QuenchingTime1)$p.value
GRQvsRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,R_No_QuenchingTime1)$p.value
RnQvsGRnQ[i]<-wilcox.test(GR_No_QuenchingTime1,R_No_QuenchingTime1)$p.value
GRQ[i]<-shapiro.test(GR_QuenchingTime$Venus_over_mCherry)$p.value
GRnQ[i]<-shapiro.test(GR_No_QuenchingTime$Venus_over_mCherry)$p.value
RnQ[i]<-shapiro.test(R_No_QuenchingTime$Venus_over_mCherry)$p.value
}
GRQ_vs_GRnQ=rep("GR Quenching - GR no Quenching",size)
GRQ_vs_RnQ=rep("GR Quenching - R no Quenching",size)
RnQ_vs_GRnQ=rep("GR no Quenching - R no Quenching",size)
GRQ_names=rep("GR Quenching",size)
GRnQ_names=rep("GR no Quenching",size)
RnQ_names=rep("R no Quenching",size)
Test<-c(GRQ_vs_GRnQ,GRQ_vs_RnQ,RnQ_vs_GRnQ)
Names<-c(GRQ_names,GRnQ_names,RnQ_names)
P_Value<-c(GRQvsGRnQ,GRQvsRnQ,RnQvsGRnQ)
Shapiro<-c(GRQ,GRnQ,RnQ)
Time=as.numeric(levels(GlobalData1$Time.Img))
Time=rep(Time,3)
P_Values<-data.frame(Time,Test,P_Value)
Shapiro_P_Values<-data.frame(Time,Names,Shapiro)
ggplot(P_Values,aes(x=Time,log10="y",y = P_Value,group=Test,color=Test))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.direction = "vertical",legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
ggplot(Shapiro_P_Values,aes(x=Time,log10="y",y = Shapiro,group=Names,color=Names))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
ggplot(P_Values,aes(x=Time,log10="y",y = P_Value,group=Test,color=Test))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.direction = "vertical",legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
ggplot(Shapiro_P_Values,aes(x=Time,log10="y",y = Shapiro,group=Names,color=Names))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
GlobalData$No..Cell<-as.factor(GlobalData$No..Cell)
GlobalData$Condition<-as.factor(GlobalData$Condition)
GlobalData$Video<-as.factor(GlobalData$Video)
LysosomesNumber <- summarise(group_by(GlobalData, Time.Img,Condition),
No.Lyso=max(No..Lys.))
p1<-ggplot(LysosomesNumber,aes(x=as.numeric(as.character(Time.Img)),y=No.Lyso,
color=Condition))
p1+geom_point()+geom_line()+xlab('Time')+ylab('Number of Lysosomes')+
theme(legend.position="bottom")+
scale_y_continuous(breaks = seq(0, 200, by = 20))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))
GlobalData <- summarise(group_by(GlobalData, Time.Img,Condition), mCherry = mean(mCherry_Mean.),
Sd_mCherry=sd(mCherry_Mean.), Venus=mean(Venus_Mean),
Sd_Venus=sd(Venus_Mean), Area=mean(Area.Lys.)*0.21,
Sd_Area=sd(Area.Lys.),
mCherry_over_Area=mean(mCherry_Mean./Area.Lys.),
Sd_mCherry_over_Area=sd(mCherry_Mean./Area.Lys.),
Venus_over_Area=mean(Venus_Mean/Area.Lys.),
Sd_Venus_over_Area=sd(Venus_Mean/Area.Lys.),
Venus_over_mCherry=mean(Venus_Mean/mCherry_Mean.),
Sd_Venus_over_mCherry=sd(Venus_Mean/mCherry_Mean.))
mean_intensity<-select(GlobalData,Time.Img,mCherry,Venus,Condition)
mean_intensity <- melt(mean_intensity,id=c("Time.Img","Condition")) # convert to long format
mean_intensity_SD<-select(GlobalData,Time.Img,Sd_mCherry,Sd_Venus,Condition)
mean_intensity_SD<-melt(mean_intensity_SD,id=c("Time.Img","Condition")) # convert to long format
colnames(mean_intensity_SD)<-c("Time.Img","Condition","variable1","sd_value")
mean_intensity <- merge(mean_intensity, mean_intensity_SD)
colnames(mean_intensity)<-c('Time.Img','Condition','Channel','value','variable1','sd_value')
update_geom_defaults("point", list(size=0.1))
theme_set(theme_cowplot(font_size = 6))
occuplot <- plotfunc(mean_intensity, "GR no Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot <- plotfunc(mean_intensity, "R no Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
p3 <- plotfunc(mean_intensity, "GR Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.1,0,0), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
mylegend<-g_legend(occuplot)
plotG<-grid.arrange(arrangeGrob(p3+theme(legend.position="none"),occuplot+
theme(legend.position="none")+ylab(""),
qualplot+theme(legend.justification=c(0,1),
legend.position=c(0.2,1))+
ylab(""),nrow = 1))
p3
p1
p2
qualplot
qualplot <- plotfunc(mean_intensity, "R no Quenching")+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot <- plotfunc(mean_intensity, "R no Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot
qualplot <- plotfunc(mean_intensity, "R no Quenching", -150, 500)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot
qualplot <- plotfunc(mean_intensity, "R no Quenching", -350, 500)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot
occuplot <- plotfunc(mean_intensity, "GR no Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
qualplot <- plotfunc(mean_intensity, "R no Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.3,0,-.5), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
p3 <- plotfunc(mean_intensity, "GR Quenching", -150, 1950)+
theme(plot.margin=unit(c(0.1,0.1,0,0), "cm"))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))
plotG<-grid.arrange(arrangeGrob(p3+theme(legend.position="none"),occuplot+
theme(legend.position="none")+ylab(""),
qualplot+theme(legend.justification=c(0,1),
legend.position=c(0.2,1))+
ylab(""),nrow = 1))
update_geom_defaults("point", list(size=0.5))
theme_set(theme_cowplot(font_size = 6))
mean_quotient<-select(GlobalData,Time.Img,Venus_over_mCherry,Condition)
mean_quotient <- melt(mean_quotient,id=c("Time.Img","Condition")) # convert to long format
mean_quotient_SD<-select(GlobalData,Time.Img,Sd_Venus_over_mCherry,Condition)
mean_quotient_SD<-melt(mean_quotient_SD,id=c("Time.Img","Condition")) # convert to long format
colnames(mean_quotient_SD)<-c("Time.Img","Condition","variable1","sd_value")
mean_quotient <- merge(mean_quotient, mean_quotient_SD)
colnames(mean_quotient)<-c('Time.Img','Condition','Channel','value','variable1','sd_value')
p1<-ggplot(mean_quotient,aes(x=as.numeric(as.character(Time.Img)),y=value,color=Condition))+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Condition),
linetype=0,alpha=0.2)+coord_cartesian(ylim=c(0.1, 1))+
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
p1<-p1+geom_point()+geom_line()+xlab('Time')+ylab('Venus/mCherry')+theme(legend.position="bottom")+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))
p1
ggplot(mean_quotient,aes(x=as.numeric(as.character(Time.Img)),y=value,color=Condition))+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Condition),
linetype=0,alpha=0.2)
# Directory with the files.
dir<-"/home/yasel/Data Science/Projects/Monitoring-Cytosolic-Fluorescent-Aggregates-in-Cells/Data(csv)/GR quenching/"
# Files in the directory
files<-list.files(dir,pattern = ".csv")
for (i in 1:length(files)){
datos<-read.csv(paste(dir,files[i],sep = ""))
# Convert to factor the type variable.
datos$Type<-factor(datos$Type,levels = c(1,2),labels = c("mCherry", "Venus"))
# Re-writte the changes in the file
write.csv(datos,paste(dir,files[i],sep = ""),row.names = FALSE)
}
datos<-read.csv(paste(dir,files[i],sep = ""))
datos
# Convert to factor the type variable.
datos$Type<-factor(datos$Type,levels = c(1,2),labels = c("mCherry", "Venus"))
# Library
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(cowplot)
library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-5,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-5,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
install.packages("gridExtra")
install.packages("gridExtra")
