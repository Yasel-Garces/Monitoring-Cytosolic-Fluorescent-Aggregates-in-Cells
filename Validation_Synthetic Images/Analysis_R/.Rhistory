library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-6,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
#----------------------------------------------------------------------------
## Load the files for the 3 conditions
# Directory with the data
dir_GR_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR_no_quenching/'
# Load data
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
# Factor variables
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
#----------------------------------------------------------------------------
# Include the condition in the data and merge all conditions.
GR_Quenching<-mutate(GR_Quenching,Condition='GR Quenching')
R_no_Quenching<-mutate(R_no_Quenching,Condition='R no Quenching')
GR_no_Quenching<-mutate(GR_no_Quenching,Condition='GR no Quenching')
GlobalData<-rbind(GR_Quenching,R_no_Quenching,GR_no_Quenching)
# -------------------------------------------------------------------
GlobalData1<-mutate(GlobalData,Venus_over_mCherry=Venus_Mean/mCherry_Mean.)
GlobalData1<-select(GlobalData1,Time.Img,Condition,Venus_over_mCherry)
size<-length(levels(GlobalData1$Time.Img))
GRQvsGRnQ<-vector(mode="numeric",length = size)
GRQvsRnQ<-vector(mode="numeric",length = size)
RnQvsGRnQ<-vector(mode="numeric",length = size)
GRQ<-vector(mode="numeric",length = size)
GRnQ<-vector(mode="numeric",length = size)
RnQ<-vector(mode="numeric",length = size)
Condition<-rep(c("GR Quenching","GR no Quenching","R no Quenching"),size*3)
i=1
this_time<-levels(GlobalData1$Time.Img)[i]
this_timeData<-subset(GlobalData1,Time.Img==this_time)
GR_QuenchingTime<-subset(this_timeData,Condition=="GR Quenching")
GR_No_QuenchingTime<-subset(this_timeData,Condition=="GR no Quenching")
R_No_QuenchingTime<-subset(this_timeData,Condition=="R no Quenching")
GR_No_QuenchingTime1<-sample(GR_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
R_No_QuenchingTime1<-sample(R_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
GRQvsGRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,GR_No_QuenchingTime1)$p.value
GRQvsRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,R_No_QuenchingTime1)$p.value
RnQvsGRnQ[i]<-wilcox.test(GR_No_QuenchingTime1,R_No_QuenchingTime1)$p.value
hist(R_No_QuenchingTime$Venus_over_mCherry)
hist(GR_QuenchingTime$Venus_over_mCherry)
hist(subset(GlobalData,Condition=="GR Quenching"))
GRQ<-subset(GlobalData,Condition=="GR Quenching")
GRQ<-subset(GlobalData1,Condition=="GR Quenching")
hist(GRQ$Venus_over_mCherry)
GRQ<-subset(GlobalData1,Condition=="GR no Quenching")
hist(GRQ$Venus_over_mCherry)
GRQ<-subset(GlobalData1,Condition=="R no Quenching")
hist(GRQ$Venus_over_mCherry)
colnames(GlobalData1)
ggplot(GlobalData1,aes(y = Venus_over_mCherry,color=Condition))+geom_histogram()
ggplot(GlobalData1,aes(y = Venus_over_mCherry,color=Condition))+geom_bar(stat = "identity")
ggplot(GlobalData1,aes(x = Venus_over_mCherry,color=Condition))+geom_bar(stat = "identity")
ggplot(GlobalData1,aes(x = Venus_over_mCherry,color=Condition))+geom_histogram(stat = "identity")
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+geom_histogram(stat = "identity")
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+geom_histogram()
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+geom_histogram(bins = 30)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+  geom_freqpoly(binwidth = 500)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+  geom_freqpoly(binwidth = 1)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+  geom_freqpoly(binwidth = 20)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+  geom_freqpoly(binwidth = 0.01)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+
geom_histogram(aes(y = ..density..)) + geom_density()
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+
geom_histogram(aes(y = ..density..)) + geom_density() + facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+
geom_histogram(aes(y = ..density..)) +  facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,color=Condition))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition,alpha=0.5))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Time.Img,alpha=0.5))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(.~Condition)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition,alpha=0.5))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(.~Time.Img)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition,alpha=0.5))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+ facet_grid(Time.Img ~ .)
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition,alpha=0.5))+
geom_histogram(aes(y = ..density..)) +  geom_density(color="black")+geom_boxplot()
ggplot(GlobalData1,aes(Venus_over_mCherry,fill=Condition,alpha=0.5))+
geom_boxplot()
ggplot(GlobalData1,aes(x = Condition,y= Venus_over_mCherry,fill=Condition))+
geom_boxplot()
View(GlobalData)
ggplot(GlobalData,aes(x = Condition,y= Area.Lys.,fill=Condition))+
geom_boxplot()
ggplot(GlobalData,aes(x = Condition,y= mCherry.Mean.,fill=Condition))+
geom_boxplot()
ggplot(GlobalData,aes(x = Condition,y= mCherry_Mean.,fill=Condition))+
geom_boxplot()
ggplot(GlobalData,aes(x = Condition,y= Venus_Mean.,fill=Condition))+
geom_boxplot()
ggplot(GlobalData,aes(x = Condition,y= Venus_Mean,fill=Condition))+
geom_boxplot()
# Global analysis with the 3 conditions: R no Quenching, GR no Quenching y GR Quenching.
# Library
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cowplot)
library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-6,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
#----------------------------------------------------------------------------
## Load the files for the 3 conditions
# Directory with the data
dir_GR_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR_no_quenching/'
# Load data
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
# Factor variables
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
#----------------------------------------------------------------------------
# Include the condition in the data and merge all conditions.
GR_Quenching<-mutate(GR_Quenching,Condition='GR Quenching')
R_no_Quenching<-mutate(R_no_Quenching,Condition='R no Quenching')
GR_no_Quenching<-mutate(GR_no_Quenching,Condition='GR no Quenching')
GlobalData<-rbind(GR_Quenching,R_no_Quenching,GR_no_Quenching)
# -------------------------------------------------------------------
GlobalData1<-mutate(GlobalData,Venus_over_mCherry=Venus_Mean/mCherry_Mean.)
GlobalData1<-select(GlobalData1,Time.Img,Condition,Venus_over_mCherry)
size<-length(levels(GlobalData1$Time.Img))
GRQvsGRnQ<-vector(mode="numeric",length = size)
GRQvsRnQ<-vector(mode="numeric",length = size)
RnQvsGRnQ<-vector(mode="numeric",length = size)
GRQ<-vector(mode="numeric",length = size)
GRnQ<-vector(mode="numeric",length = size)
RnQ<-vector(mode="numeric",length = size)
Condition<-rep(c("GR Quenching","GR no Quenching","R no Quenching"),size*3)
for (i in 1:size){
this_time<-levels(GlobalData1$Time.Img)[i]
this_timeData<-subset(GlobalData1,Time.Img==this_time)
# GR Quenching
GR_QuenchingTime<-subset(this_timeData,Condition=="GR Quenching")
# GR no Quenching
GR_No_QuenchingTime<-subset(this_timeData,Condition=="GR no Quenching")
# GR Quenching
R_No_QuenchingTime<-subset(this_timeData,Condition=="R no Quenching")
GR_No_QuenchingTime1<-sample(GR_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
R_No_QuenchingTime1<-sample(R_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
GRQvsGRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,GR_No_QuenchingTime1)$p.value
GRQvsRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,R_No_QuenchingTime1)$p.value
RnQvsGRnQ[i]<-wilcox.test(GR_No_QuenchingTime1,R_No_QuenchingTime1)$p.value
GRQ[i]<-shapiro.test(GR_QuenchingTime$Venus_over_mCherry)$p.value
GRnQ[i]<-shapiro.test(GR_No_QuenchingTime$Venus_over_mCherry)$p.value
RnQ[i]<-shapiro.test(R_No_QuenchingTime$Venus_over_mCherry)$p.value
}
GRQ_vs_GRnQ=rep("GR Quenching - GR no Quenching",size)
GRQ_vs_RnQ=rep("GR Quenching - R no Quenching",size)
RnQ_vs_GRnQ=rep("GR no Quenching - R no Quenching",size)
GRQ_names=rep("GR Quenching",size)
GRnQ_names=rep("GR no Quenching",size)
RnQ_names=rep("R no Quenching",size)
Test<-c(GRQ_vs_GRnQ,GRQ_vs_RnQ,RnQ_vs_GRnQ)
Names<-c(GRQ_names,GRnQ_names,RnQ_names)
P_Value<-c(GRQvsGRnQ,GRQvsRnQ,RnQvsGRnQ)
Shapiro<-c(GRQ,GRnQ,RnQ)
Time=as.numeric(levels(GlobalData1$Time.Img))
Time=rep(Time,3)
P_Values<-data.frame(Time,Test,P_Value)
Shapiro_P_Values<-data.frame(Time,Names,Shapiro)
ggplot(P_Values,aes(x=Time,log10="y",y = P_Value,group=Test,color=Test))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.direction = "vertical",legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 100))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
ggplot(Shapiro_P_Values,aes(x=Time,log10="y",y = Shapiro,group=Names,color=Names))+
geom_point()+geom_line()+geom_hline(yintercept = 0.05)+
theme(legend.position="bottom")+
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))+
xlab("Time, sec")+ylab("P Value")+annotation_logticks(sides = "l")
GlobalData$No..Cell<-as.factor(GlobalData$No..Cell)
GlobalData$Condition<-as.factor(GlobalData$Condition)
GlobalData$Video<-as.factor(GlobalData$Video)
LysosomesNumber <- summarise(group_by(GlobalData, Time.Img,Condition),
No.Lyso=max(No..Lys.))
p1<-ggplot(LysosomesNumber,aes(x=as.numeric(as.character(Time.Img)),y=No.Lyso,
color=Condition))
p1+geom_point()+geom_line()+xlab('Time')+ylab('Number of Lysosomes')+
theme(legend.position="bottom")+
scale_y_continuous(breaks = seq(0, 200, by = 20))+
scale_x_continuous(limits = c(0, 605),breaks = seq(0, 600, by = 50))
paste("data$F", "data$E", sep="_")
paste("data$F", "data$E", sep=\c)
paste("data$F", "data$E", sep="\c")
paste("A", 1, "%")
paste0("a", "b")
person <-"Grover"
action <-"flying"
message(paste0("On ", Sys.Date(), " I realized ", person, " was...\n", action, " by the street"))
person <-"Grover"
action <-"flying"
message(sprintf("On %s I realized %s was...\n%s by the street", Sys.Date(), person, action))
person <-"Grover"
action <-"flying"
message(sprintf("On %s I realized %s was...\n%s by the street", Sys.Date(), person, action))
person <-"Grover"
action <-"flying"
message(paste0("On ", Sys.Date(), " I realized ", person, " was...\n", action, " by the street"))
person <-"Grover"
action <-"flying"
message(paste0("On ", Sys.Date(), " I realized ", person, " was...\n", action, Sys.Date()," by the street"))
person <-"Grover"
action <-"flying"
message(paste0("On ", Sys.Date(), " I realized ", person, " was...\n", action, " ", Sys.Date()," by the street"))
person <-"Grover"
action <-"flying"
message(paste0("On ", Sys.Date(), " I realized ", person, " was...\n", action, " ", Sys.Date()," by the street"))
0.7046756/0.015182801
shiny::runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
shiny::runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
runApp('Dropbox/Paper Viroplasmas/Shiny Rotavirus')
shiny::runApp('Dropbox/Data Science/Develop Data Products/Shiny for me/WordPrediction')
runApp('Dropbox/Data Science/Develop Data Products/Shiny for me/WordPrediction')
shiny::runApp('Dropbox/Data Science/Develop Data Products/Shiny for me/WordPrediction')
plot(1:10,1:10)
dev.off()
pdf("test.pdf")
plot(1:10,1:10)
dev.off()
plot(1:10,1:10)
plot(1:10,1:10)
# Global analysis with the 3 conditions: R no Quenching, GR no Quenching y GR Quenching.
# Library
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cowplot)
library(scales)
# Function to load all files in one directory.
readFiles<-function(directory){
files<-list.files(directory,pattern = ".csv")
# Merge the files of the same test (all in the directory)
GlobalData<-read.csv(paste(directory,files[1],sep = ""))
GlobalData<-mutate(GlobalData,Video=as.numeric(
substr(files[1],nchar(files[1])-6,nchar(files[1])-4))
)
if (length(files)>1){
for (i in 2:length(files)){
temporal<-read.csv(paste(directory,files[i],sep = ""))
temporal<-mutate(temporal,Video=as.numeric(
substr(files[i],nchar(files[i])-6,nchar(files[i])-4))
)
GlobalData<-rbind(GlobalData,temporal)
}
}
GlobalData
}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
# Plot in two differents graphs
plotfunc <- function(Data, xxx , ymin, ymax) {
# Select a subset of the data in base of the condition
data=subset(Data, Condition==xxx)
# Create the ggplot object
p1<-ggplot(data,mapping = aes(x = as.numeric(as.character(Time.Img)),
y = value,group=Channel,colour=Channel))+
geom_point(size=0.5)+geom_line()+
geom_ribbon(aes(ymax = value + sd_value, ymin= value - sd_value,fill = Channel),
linetype=0,alpha=0.2)+
xlab('Time')+ylab('Mean Intensity per Lysosome')+
facet_grid(.~ Condition, scales = "free")+coord_cartesian(ylim=c(ymin, ymax))+
scale_y_continuous(breaks = seq(ymin, ymax, by = 150))
}
#----------------------------------------------------------------------------
## Load the files for the 3 conditions
# Directory with the data
dir_GR_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR quenching/'
dir_R_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/R_no_quenching/'
dir_GR_no_Quenching<-'/home/yasel/Dropbox/LisosomasProgram/Data(csv)/GR_no_quenching/'
# Load data
GR_Quenching<-readFiles(dir_GR_Quenching)
R_no_Quenching<-readFiles(dir_R_no_Quenching)
GR_no_Quenching<-readFiles(dir_GR_no_Quenching)
# Factor variables
GR_Quenching$Time.Img<-as.factor(GR_Quenching$Time.Img*5)
R_no_Quenching$Time.Img<-as.factor(R_no_Quenching$Time.Img*5)
GR_no_Quenching$Time.Img<-as.factor(GR_no_Quenching$Time.Img*5)
#----------------------------------------------------------------------------
# Include the condition in the data and merge all conditions.
GR_Quenching<-mutate(GR_Quenching,Condition='GR Quenching')
R_no_Quenching<-mutate(R_no_Quenching,Condition='R no Quenching')
GR_no_Quenching<-mutate(GR_no_Quenching,Condition='GR no Quenching')
GlobalData<-rbind(GR_Quenching,R_no_Quenching,GR_no_Quenching)
# -------------------------------------------------------------------
GlobalData1<-mutate(GlobalData,Venus_over_mCherry=Venus_Mean/mCherry_Mean.)
GlobalData1<-select(GlobalData1,Time.Img,Condition,Venus_over_mCherry)
size<-length(levels(GlobalData1$Time.Img))
GRQvsGRnQ<-vector(mode="numeric",length = size)
GRQvsRnQ<-vector(mode="numeric",length = size)
RnQvsGRnQ<-vector(mode="numeric",length = size)
GRQ<-vector(mode="numeric",length = size)
GRnQ<-vector(mode="numeric",length = size)
RnQ<-vector(mode="numeric",length = size)
Condition<-rep(c("GR Quenching","GR no Quenching","R no Quenching"),size*3)
for (i in 1:size){
this_time<-levels(GlobalData1$Time.Img)[i]
this_timeData<-subset(GlobalData1,Time.Img==this_time)
# GR Quenching
GR_QuenchingTime<-subset(this_timeData,Condition=="GR Quenching")
# GR no Quenching
GR_No_QuenchingTime<-subset(this_timeData,Condition=="GR no Quenching")
# GR Quenching
R_No_QuenchingTime<-subset(this_timeData,Condition=="R no Quenching")
GR_No_QuenchingTime1<-sample(GR_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
R_No_QuenchingTime1<-sample(R_No_QuenchingTime$Venus_over_mCherry, 90, replace = FALSE)
GRQvsGRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,GR_No_QuenchingTime1)$p.value
GRQvsRnQ[i]<-wilcox.test(GR_QuenchingTime$Venus_over_mCherry,R_No_QuenchingTime1)$p.value
RnQvsGRnQ[i]<-wilcox.test(GR_No_QuenchingTime1,R_No_QuenchingTime1)$p.value
GRQ[i]<-shapiro.test(GR_QuenchingTime$Venus_over_mCherry)$p.value
GRnQ[i]<-shapiro.test(GR_No_QuenchingTime$Venus_over_mCherry)$p.value
RnQ[i]<-shapiro.test(R_No_QuenchingTime$Venus_over_mCherry)$p.value
}
GRQ_vs_GRnQ=rep("GR Quenching - GR no Quenching",size)
GRQ_vs_RnQ=rep("GR Quenching - R no Quenching",size)
RnQ_vs_GRnQ=rep("GR no Quenching - R no Quenching",size)
GRQ_names=rep("GR Quenching",size)
GRnQ_names=rep("GR no Quenching",size)
RnQ_names=rep("R no Quenching",size)
Test<-c(GRQ_vs_GRnQ,GRQ_vs_RnQ,RnQ_vs_GRnQ)
Names<-c(GRQ_names,GRnQ_names,RnQ_names)
P_Value<-c(GRQvsGRnQ,GRQvsRnQ,RnQvsGRnQ)
Shapiro<-c(GRQ,GRnQ,RnQ)
Time=as.numeric(levels(GlobalData1$Time.Img))
Time=rep(Time,3)
P_Values<-data.frame(Time,Test,P_Value)
Shapiro_P_Values<-data.frame(Time,Names,Shapiro)
# Script to process the data relative to the lysosomes research carry up with Vadim, Adan and Yasel.
# Author: Yasel Garcés (88yasel@gmail.com)
# Libraries
library(dplyr)
library(ggplot2)
library(cowplot)
library(reshape2)
############# Some functions ###############
statisticBYcolumns<-function(data){
dataMean<-c()
dataVar<-c()
dataSD<-c()
for(i in 1:dim(data)[2]){
dataMean[i]<-mean(data[,i])
dataVar[i]<-var(data[,i])
dataSD[i]<-sd(data[,i])
}
return(list(Mean=dataMean,Var=dataVar,Sd=dataSD))
}
#####
dir<-'/home/yasel/Dropbox/VadimLisosomas/Generation_image_Micrsocopy/'
setwd(dir)
Area<-read.csv('Area.csv',header = FALSE)
Displacement<-read.csv('Displacement.csv',header = FALSE)
Jaccard<-read.csv('Jaccard.csv',header = FALSE)
Precision<-read.csv('Precision.csv',header = FALSE)
Recall<-read.csv('Recall.csv',header = FALSE)
SNR<-read.csv('SNR.csv',header = FALSE)
index<-rowSums(SNR)!=0
Area1<-Area[index,]
Displacement1<-Displacement[index,]
Jaccard1<-Jaccard[index,]
Precision1<-Precision[index,]
Recall1<-Recall[index,]
SNR1<-SNR[index,]
Area<-statisticBYcolumns(Area1)
Displacement<-statisticBYcolumns(Displacement1)
Jaccard<-statisticBYcolumns(Jaccard1)
Precision<-statisticBYcolumns(Precision1)
Recall<-statisticBYcolumns(Recall1)
SNR<-statisticBYcolumns(SNR1)
Resume<-data.frame(SNR_Mean=SNR$Mean,SNR_Var=SNR$Var,SNR_SD=SNR$Sd,
Jaccard_Mean=Jaccard$Mean,Jaccard_Var=Jaccard$Var,Jaccard_SD=Jaccard$Sd,
Precision_Mean=Precision$Mean,Precision_Var=Precision$Var,Precision_SD=Precision$Sd,
Recall_Mean=Recall$Mean,Recall_Var=Recall$Var,Recall_SD=Recall$Sd,
Area_Mean=Area$Mean,Area_Var=Area$Var,Area_SD=Area$Sd,
Displacement_Mean=Displacement$Mean,Displacement_Var=Displacement$Var,
Displacement_SD=Displacement$Sd)
pdf("AreaBoxplot.pdf",width = 4.5,height=4.5)
dev.off()
colnames(Area1)<-format(Resume$SNR_Mean, digits=2, nsmall=2)
Area1<-Area1[c(20:1)]
boxplot(Area1,notch = TRUE,outline = FALSE,col = "cyan",xlab="SNR (dB)",las=2,
ylab=expression("Error of the area "(mu~m^2)),yaxt="n")
axis(side=2,labels=seq(0.01,0.09,0.01),at=seq(0.01,0.09,0.01),las=2)
library(dplyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cowplot)
setwd('/home/yasel/Dropbox/Generation_image_Micrsocopy/R Processing')
my_data<-read.csv('Data.csv')
setwd('/home/yasel/Dropbox/VadimLisosomas/Generation_image_Micrsocopy/R Processing')
my_data<-read.csv('Data.csv')
colnames(my_data)<-c('Noise','SNR','PartialOclussion','A','B','CX','CY','Theta')
my_data$Noise<-as.factor(my_data$Noise)
my_data$SNR<-as.factor(my_data$SNR)
my_data$PartialOclussion<-as.factor(my_data$PartialOclussion)
my_data[,4:7]<-my_data[,4:7]/10
my_table<-table(my_data$A<=0.5)
p1<-ggplot(my_data,aes(x=SNR,y=A,color=PartialOclussion))+geom_boxplot(notch=TRUE)
p1+geom_hline(yintercept=0.5)+scale_y_continuous(breaks = seq(0, 7, by = 0.5))+
scale_colour_discrete(breaks = levels(NoiseAngle$PartialOclussion),
labels = c(expression(0),
expression(pi/4),
expression(pi/2),
expression(3*pi/4),
expression(pi),
expression(5*pi/4)),name = "Partial Occlusion")+
theme(legend.text.align = 0)
my_table
my_data$SNR
